PACKAGE

package rest

    A quick and easy way to setup a RESTful JSON API

    Go-JSON-REST is a thin layer on top of net/http that helps building
    RESTful JSON APIs easily. It provides fast URL routing using
    https://github.com/ant0ine/go-urlrouter, and helpers to deal with JSON
    requests and responses. It is not a high-level REST framework that
    transparently maps HTTP requests to language procedure calls, on the
    opposite, you constantly have access to the underlying net/http objects.

    Example:

	package main
	import (
	        "github.com/ant0ine/go-json-rest"
	        "net/http"
	)
	type User struct {
	        Id   string
	        Name string
	}
	func GetUser(w *rest.ResponseWriter, req *rest.Request) {
	        user := User{
	                Id:   req.PathParam("id"),
	                Name: "Antoine",
	        }
	        w.WriteJson(&user)
	}
	func main() {
	        handler := ResourceHandler{}
	        handler.SetRoutes(
	                rest.Route{"GET", "/users/:id", GetUser},
	        )
	        http.ListenAndServe(":8080", &handler)
	}

TYPES

type Request struct {
    *http.Request
    // map of parameters that have been matched in the URL Path.
    PathParams map[string]string
}
    Inherit from http.Request, and provide additional methods.

func (self *Request) DecodeJsonPayload(v interface{}) error
    Read the request body and decode the JSON using json.Unmarshal

func (self *Request) PathParam(name string) string
    Provide a convenient access to the PathParams map

type ResourceHandler struct {

    // If true and if the client accepts the Gzip encoding, the response payloads
    // will be compressed using gzip, and the corresponding response header will set.
    EnableGzip bool

    // If true the JSON payload will be written in one line with no space.
    DisableJsonIndent bool

    // If true, when a "panic" happens, the error string and the stack trace will be
    // printed in the 500 response body.
    EnableResponseStackTrace bool
    // contains filtered or unexported fields
}
    Implement the http.Handler interface and act as a router for the defined
    Routes. The defaults are intended to be developemnt friendly, for
    production you may want to turn on gzip and disable the JSON
    indentation.

func (self *ResourceHandler) ServeHTTP(orig_writer http.ResponseWriter, orig_request *http.Request)
    This makes ResourceHandler implement the http.Handler interface

func (self *ResourceHandler) SetRoutes(routes ...Route) error
    Define the Routes. The order the Routes matters, if a request matches
    multiple Routes, the first one will be used. Note that the underlying
    router is https://github.com/ant0ine/go-urlrouter.

type ResponseWriter struct {
    http.ResponseWriter
    // contains filtered or unexported fields
}
    Inherit from an object implementing the http.ResponseWriter interface,
    and provide additional methods.

func (self *ResponseWriter) Write(b []byte) (int, error)
    Overloading of the http.ResponseWriter method. Provide additional
    capabilities, like transparent gzip encoding.

func (self *ResponseWriter) WriteJson(v interface{}) error
    Encode the object in JSON, set the content-type header, and call Write

type Route struct {
    HttpMethod string
    PathExp    string
    Func       func(*ResponseWriter, *Request)
}
    Used with SetRoutes.

func RouteObjectMethod(http_method string, path_exp string, object_instance interface{}, object_method string) Route
    Create a Route that points to an object method. It can be convenient to
    point to an object method instead of a function, this helper makes it
    easy by passing the object instance and the method name as parameters.


SUBDIRECTORIES

	examples

