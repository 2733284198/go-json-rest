{"name":"Go-json-rest","tagline":"A quick and easy way to setup a RESTful JSON API","body":"\r\nGo-Json-Rest\r\n============\r\n\r\n*A quick and easy way to setup a RESTful JSON API*\r\n\r\n**Version 2 of Go-Json-Rest is currently in development, you can try it by checking out the [“v2-alpha” branch](https://github.com/ant0ine/go-json-rest/tree/v2-alpha). Thanks in advance for your feedback.**\r\n\r\n[![Build Status](https://travis-ci.org/ant0ine/go-json-rest.png?branch=master)](https://travis-ci.org/ant0ine/go-json-rest)\r\n\r\n**Go-Json-Rest** is a thin layer on top of `net/http` that helps building RESTful JSON APIs easily. It provides fast URL routing using a Trie based implementation, and helpers to deal with JSON requests and responses. It is not a high-level REST framework that transparently maps HTTP requests to procedure calls, on the opposite, you constantly have access to the underlying\r\n`net/http` objects.\r\n\r\nFeatures\r\n-----------\r\n- Implemented as a `net/http` Handler. This standard interface allows combinations with other Handlers.\r\n- Fast URL routing. It implements the classic route description syntax using a fast and scalable trie data structure.\r\n- Test package to help writing tests for the API.\r\n- Optional /.status endpoint for easy monitoring.\r\n- Examples\r\n\r\nInstall\r\n-------\r\n\r\nThis package is \"go-gettable\", just do:\r\n\r\n    go get github.com/ant0ine/go-json-rest\r\n\r\nVendoring\r\n---------\r\n\r\nThe recommended way of using this library in your project is to use the **\"vendoring\"** method,\r\nwhere this library code is copied in your repository at a specific revision.\r\n[This page](http://nathany.com/go-packages/) is a good summary of package management in Go.\r\n\r\nExample\r\n-------\r\n\r\n~~~ go\r\npackage main\r\nimport (\r\n        \"github.com/ant0ine/go-json-rest\"\r\n        \"net/http\"\r\n)\r\ntype User struct {\r\n        Id   string\r\n        Name string\r\n}\r\nfunc GetUser(w *rest.ResponseWriter, req *rest.Request) {\r\n        user := User{\r\n                Id:   req.PathParam(\"id\"),\r\n                Name: \"Antoine\",\r\n        }\r\n        w.WriteJson(&user)\r\n}\r\nfunc main() {\r\n        handler := rest.ResourceHandler{}\r\n        handler.SetRoutes(\r\n                rest.Route{\"GET\", \"/users/:id\", GetUser},\r\n        )\r\n        http.ListenAndServe(\":8080\", &handler)\r\n}\r\n~~~\r\n\r\nMore Examples\r\n-------------\r\n\r\n(See the dedicated examples repository: https://github.com/ant0ine/go-json-rest-examples)\r\n\r\n- [Countries](https://github.com/ant0ine/go-json-rest-examples/blob/master/countries/main.go) Demo very simple GET, POST, DELETE operations\r\n- [Users](https://github.com/ant0ine/go-json-rest-examples/blob/master/users/main.go) Demo the mapping to object methods\r\n- [SPDY](https://github.com/ant0ine/go-json-rest-examples/blob/master/spdy/main.go) Demo SPDY using github.com/shykes/spdy-go\r\n- [GAE](https://github.com/ant0ine/go-json-rest-examples/tree/master/gae) Demo go-json-rest on Google App Engine\r\n- [GORM](https://github.com/ant0ine/go-json-rest-examples/blob/master/gorm/main.go) Demo basic CRUD operations using MySQL and GORM\r\n- [Streaming](https://github.com/ant0ine/go-json-rest-examples/blob/master/streaming/main.go) Demo Line Delimited JSON stream\r\n- [CORS](https://github.com/ant0ine/go-json-rest-examples/blob/master/cors/main.go) Demo CORS support for all endpoints\r\n- [Basic Auth](https://github.com/ant0ine/go-json-rest-examples/blob/master/auth-basic/main.go) Demo an Authentication Basic impl for all endpoints\r\n\r\n\r\nDocumentation\r\n-------------\r\n\r\n- [Online Documentation (godoc.org)](http://godoc.org/github.com/ant0ine/go-json-rest)\r\n- [(Blog Post) Introducing Go-Json-Rest] (http://blog.ant0ine.com/typepad/2013/04/introducing-go-json-rest.html)\r\n- [(Blog Post) Better URL Routing ?] (http://blog.ant0ine.com/typepad/2013/02/better-url-routing-golang-1.html)\r\n\r\nOptions\r\n-------\r\n\r\nThings to enable in production:\r\n- Gzip compression (default: disabled)\r\n- Custom Logger (default: Go default)\r\n\r\nThings to enable in development:\r\n- Json indentation (default: enabled)\r\n- Relaxed ContentType (default: disabled)\r\n- Error stack trace in the response body (default: disabled)\r\n\r\nThe Status Endpoint\r\n-------------------\r\n\r\nInspired by memcached \"stats\", this optional feature can be enabled to help monitoring the service.\r\n\r\nGET /.status returns something like:\r\n\r\n    {\r\n      \"Pid\": 21732,\r\n      \"UpTime\": \"1m15.926272s\",\r\n      \"UpTimeSec\": 75.926272,\r\n      \"Time\": \"2013-03-04 08:00:27.152986 +0000 UTC\",\r\n      \"TimeUnix\": 1362384027,\r\n      \"StatusCodeCount\": {\r\n        \"200\": 53,\r\n        \"404\": 11\r\n      },\r\n      \"TotalCount\": 64,\r\n      \"TotalResponseTime\": \"16.777ms\",\r\n      \"TotalResponseTimeSec\": 0.016777,\r\n      \"AverageResponseTime\": \"262.14us\",\r\n      \"AverageResponseTimeSec\": 0.00026214\r\n    }\r\n\r\nThanks\r\n------\r\n- [Franck Cuny](https://github.com/franckcuny)\r\n- [Yann Kerhervé](https://github.com/yannk)\r\n- [Ask Bjørn Hansen](https://github.com/abh)\r\n\r\n\r\nCopyright (c) 2013-2014 Antoine Imbert\r\n\r\n[MIT License](https://github.com/ant0ine/go-json-rest/blob/master/LICENSE)\r\n\r\n[![Analytics](https://ga-beacon.appspot.com/UA-309210-4/go-json-rest/readme)](https://github.com/igrigorik/ga-beacon)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}