
Go-Json-Rest
============

*A quick and easy way to setup a RESTful JSON API*

[![Build Status](https://travis-ci.org/ant0ine/go-json-rest.png?branch=master)](https://travis-ci.org/ant0ine/go-json-rest)


**Warning: This is v2-alpha, a work in progress for the version 2 of Go-Json-Rest**

**Go-Json-Rest** is a thin layer on top of `net/http` that helps building RESTful JSON APIs easily. It provides fast URL routing using a Trie based implementation, helpers to deal with JSON requests and responses, and middlewares for additional functionalities like CORS, Auth, Gzip ...


Features
--------
- Many examples.
- Fast URL routing. It implements the classic route description syntax using a fast and scalable trie data structure.
- Use Middlewares in order to extend the functionalities.
- Implemented as a `net/http` Handler. This standard interface allows combinations with other Handlers.
- Test package to help writing tests for the API.
- Monitoring statistics inspired by Memcached.


Install
-------

This package is "go-gettable", just do:

    go get github.com/ant0ine/go-json-rest/rest


Vendoring
---------

The recommended way of using this library in your project is to use the **"vendoring"** method,
where this library code is copied in your repository at a specific revision.
[This page](http://nathany.com/go-packages/) is a good summary of package management in Go.


Examples
--------

(See the dedicated examples repository: https://github.com/ant0ine/go-json-rest-examples)

#### Hello World!

Tradition!

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/helloworld/main.go</webInclude>
~~~

#### Countries

Demo very simple GET, POST, DELETE operations

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/countries/main.go</webInclude>
~~~

#### Users

Demo the mapping to object methods

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/users/main.go</webInclude>
~~~

#### GORM

Demo basic CRUD operations using MySQL and GORM

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/gorm/main.go</webInclude>
~~~

#### CORS

Demo how to setup CorsMiddleware as a pre-routing middleware

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/cors/main.go</webInclude>
~~~

#### Basic Auth

Demo how to setup AuthBasicMiddleware as a pre-routing middleware

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/auth-basic/main.go</webInclude>
~~~

#### Status

Demo how to setup the /.status endpoint

Inspired by memcached "stats", this optional feature can be enabled to help monitoring the service.
See the "status" example to install the following status route:

GET /.status returns something like:

~~~ json
{
  "Pid": 21732,
  "UpTime": "1m15.926272s",
  "UpTimeSec": 75.926272,
  "Time": "2013-03-04 08:00:27.152986 +0000 UTC",
  "TimeUnix": 1362384027,
  "StatusCodeCount": {
	"200": 53,
	"404": 11
  },
  "TotalCount": 64,
  "TotalResponseTime": "16.777ms",
  "TotalResponseTimeSec": 0.016777,
  "AverageResponseTime": "262.14us",
  "AverageResponseTimeSec": 0.00026214
}
~~~

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/status/main.go</webInclude>
~~~

#### Status Auth

Demo how to setup the /.status endpoint protected with basic authentication

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/status-auth/main.go</webInclude>
~~~

#### Streaming

Demo Line Delimited JSON stream

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/streaming/main.go</webInclude>
~~~

#### SPDY

Demo SPDY using raw.githubusercontent.com/shykes/spdy-go

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/spdy/main.go</webInclude>
~~~

#### GAE

Demo go-json-rest on Google App Engine

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/tree/v2-alpha/gae</webInclude>
~~~

#### Basic Auth Custom

Demo a custom implementation of Authentication Basic

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/auth-basic-custom/main.go</webInclude>
~~~

#### CORS Custom

Demo a custom implementation of CORS

~~~ go
<webInclude>https://raw.githubusercontent.com/ant0ine/go-json-rest-examples/v2-alpha/cors-custom/main.go</webInclude>
~~~


External Documentation
----------------------

- [Online Documentation (godoc.org)](http://godoc.org/github.com/ant0ine/go-json-rest)

Old v1 blog posts:

- [(Blog Post) Introducing Go-Json-Rest] (http://blog.ant0ine.com/typepad/2013/04/introducing-go-json-rest.html)
- [(Blog Post) Better URL Routing ?] (http://blog.ant0ine.com/typepad/2013/02/better-url-routing-golang-1.html)


Options
-------

Things to enable in production:
- Gzip compression (default: disabled)
- Custom Logger (default: Go default)

Things to enable in development:
- Json indentation (default: enabled)
- Relaxed ContentType (default: disabled)
- Error stack trace in the response body (default: disabled)


Migration guide from v1 to v2
-----------------------------

**Go-Json-Rest** follows [Semver](http://semver.org/) and a few breaking changes have been introduced with the v2.


#### The import path has changed to `github.com/ant0ine/go-json-rest/rest`

This is more conform to Go style, and makes [goimports](https://godoc.org/code.google.com/p/go.tools/cmd/goimports) work.

This:
~~~ go
import (
        "github.com/ant0ine/go-json-rest"
)
~~~
has to be changed to this:
~~~ go
import (
        "github.com/ant0ine/go-json-rest/rest"
)
~~~


#### rest.ResponseWriter is now an interface

This change allows the `ResponseWriter` to be wrapped, like the one of the `net/http` package. Middlewares like Gzip used this to encode the payload (see gzip.go).

This:
~~~ go
func (w *rest.ResponseWriter, req *rest.Request) {
        ...
}
~~~
has to be changed to this:
~~~ go
func (w rest.ResponseWriter, req *rest.Request) {
        ...
}
~~~


####  The notion of Middleware is now formally defined

A middleware is an object satisfying this interface:
~~~ go
type Middleware interface {
	MiddlewareFunc(handler HandlerFunc) HandlerFunc
}
~~~

Code using PreRoutingMiddleware will have to be adapted to provide a list of Middleware objects.
See the [Basic Auth example](https://github.com/ant0ine/go-json-rest-examples/blob/v2-alpha/auth-basic/main.go).


#### Flush(), CloseNotify() and Write() are not directly exposed anymore

A type assertion of the corresponding interface is necessary.

This:
~~~ go
writer.Flush()
~~~
has to be changed to this:
~~~ go
writer.(http.Flusher).Flush()
~~~


#### The /.status endpoint is not created automatically anymore

The route has to be manually defined.
See the [Status example](https://github.com/ant0ine/go-json-rest-examples/blob/v2-alpha/status/main.go).


#### Request utility methods have changed

Overall, they provide the same features, but with two methods instead of three, better names, and without the confusing `UriForWithParams`.

`func (r *Request) UriBase() url.URL` is now `func (r *Request) BaseUrl() *url.URL`, Note the pointer as the returned value.

`func (r *Request) UriForWithParams(path string, parameters map[string][]string) url.URL` is now `func (r *Request) UrlFor(path string, queryParams map[string][]string) *url.URL` and `func (r *Request) UriFor(path string) url.URL` has be removed.

Thanks
------
- [Franck Cuny](https://github.com/franckcuny)
- [Yann Kerhervé](https://github.com/yannk)
- [Ask Bjørn Hansen](https://github.com/abh)


Copyright (c) 2013-2014 Antoine Imbert

[MIT License](https://github.com/ant0ine/go-json-rest/blob/master/LICENSE)

[![Analytics](https://ga-beacon.appspot.com/UA-309210-4/go-json-rest/v2-alpha/readme)](https://github.com/igrigorik/ga-beacon)


